AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  InfrastructureStack:
    Type: String
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  Tag:
    Type: String
Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "EcsServiceDiscovery"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:ListTasks"
                  - "ecs:DescribeTasks"
                Resource: "*"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: liquidity
          Image:
            !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${InfrastructureStack}:${Tag}"
          ReadonlyRootFilesystem: true
          PortMappings:
          - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: liquidity
          Environment:
            - Name: JAVA_OPTS
              Value: !Sub "-Dakka.management.cluster.bootstrap.\
                contact-point-discovery.service-name=${AWS::StackName}
                -Dakka.cluster.roles.0=zone-host
                -Dakka.cluster.roles.1=client-relay
                -Dakka.cluster.roles.2=analytics"
            - Name: MYSQL_HOSTNAME
              Value:
                Fn::ImportValue: !Sub "${InfrastructureStack}-RDSHostname"
            - Name: MYSQL_USERNAME
              Value:
                Fn::ImportValue: !Sub "${InfrastructureStack}-RDSUsername"
            - Name: MYSQL_PASSWORD
              Value:
                Fn::ImportValue: !Sub "${InfrastructureStack}-RDSPassword"
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-service"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub "${InfrastructureStack}-ALBSecurityGroup"
  ServiceSecurityGroupAkkaManagementSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ServiceSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 19999
      ToPort: 19999
      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
  ServiceSecurityGroupAkkaClusterSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ServiceSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 25520
      ToPort: 25520
      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
  Service:
    Type: AWS::ECS::Service
    Properties:
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSecurityGroup.GroupId
      LaunchType: FARGATE
      ServiceName: !Ref AWS::StackName
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: liquidity
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: !Sub "${InfrastructureStack}-ALBTargetGroup"
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: "liquidityapp.com."
      RecordSets:
        - AliasTarget:
            HostedZoneId:
              Fn::ImportValue: !Sub "${InfrastructureStack}-ALBCanonicalHostedZoneID"
            DNSName:
              Fn::ImportValue: !Sub "${InfrastructureStack}-ALBDNSName"
          Name:
            Fn::ImportValue: !Sub "${InfrastructureStack}-Domain"
          Type: A
        - AliasTarget:
            HostedZoneId:
              Fn::ImportValue: !Sub "${InfrastructureStack}-ALBCanonicalHostedZoneID"
            DNSName:
              Fn::ImportValue: !Sub "${InfrastructureStack}-ALBDNSName"
          Name:
            Fn::ImportValue: !Sub "${InfrastructureStack}-Domain"
          Type: AAAA
