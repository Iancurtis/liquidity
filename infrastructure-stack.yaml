AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  RDSUsername:
    Type: String
  RDSPassword:
    Type: String
Resources:
  RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: !Sub "${AWS::StackName}"
        SubnetIds: !Ref Subnets
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-rds"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          CidrIpv6: "::/0"
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Ref AWS::StackName
      Family: mysql5.7
      Parameters:
        character-set-client-handshake: 0
        character_set_server: utf8mb4
        collation_server: utf8mb4_unicode_ci
  RDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    Properties:
      Engine: MySQL
      EngineVersion: "5.7.19"
      DBInstanceClass: db.t2.micro
      StorageType: gp2
      AllocatedStorage: "20"
      BackupRetentionPeriod: "30"
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBParameterGroupName: !Ref RDSParameterGroup
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-alb"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIpv6: "::/0"
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      IpAddressType: dualstack
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "60"
  ALBListenerCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "api.liquidityapp.com"
      DomainValidationOptions:
        - DomainName: "api.liquidityapp.com"
          ValidationDomain: "liquidityapp.com"
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      TargetType: ip
      Protocol: "HTTP"
      Port: 80
      HealthCheckPath: "/status/terse"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref ALBListenerCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref AWS::StackName
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: "admin@liquidityapp.com"
  CloudWatchTargetGroupAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref ALB
        - Name: TargetGroup
          Value: !Ref ALBTargetGroup
      MetricName: UnHealthyHostCount
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1.0
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SNSTopic
      OKActions:
        - !Ref SNSTopic
Outputs:
  RDSHostname:
    Value: !GetAtt RDS.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDSHostname"
  RDSUsername:
    Value: !Ref RDSUsername
    Export:
      Name: !Sub "${AWS::StackName}-RDSUsername"
  RDSPassword:
    Value: !Ref RDSPassword
    Export:
      Name: !Sub "${AWS::StackName}-RDSPassword"
  ALBSecurityGroup:
    Value: !GetAtt ALBSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ALBSecurityGroup"
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
  ALBTargetGroup:
    Value: !Ref ALBTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-ALBTargetGroup"
