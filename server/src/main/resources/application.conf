akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      zone-event = "com.dhpcs.liquidity.server.serialization.ZoneEventSerializer"
      client-connection-protocol = "com.dhpcs.liquidity.server.serialization.ClientConnectionMessageSerializer"
      zone-validator-protocol = "com.dhpcs.liquidity.server.serialization.ZoneValidatorMessageSerializer"
    }
    serialization-bindings {
      "com.dhpcs.liquidity.persistence.ZoneEvent" = zone-event
      "com.dhpcs.liquidity.actor.protocol.ClientConnectionMessage" = client-connection-protocol
      "com.dhpcs.liquidity.actor.protocol.ZoneValidatorMessage" = zone-validator-protocol
    }
    allow-java-serialization = off
  }
  remote.netty.tcp {
    hostname = ${AKKA_HOSTNAME}
    bind-hostname = "0.0.0.0"
  }
  cluster {
    auto-down-unreachable-after = 5s
    metrics.enabled = off
  }
  extensions += "akka.persistence.Persistence"
  persistence.journal {
    auto-start-journals = ["cassandra-journal"]
    plugin = "cassandra-journal"
  }
  http.server {
    remote-address-header = on
    parsing.tls-session-info-header = on
  }
}
cassandra-journal {
  contact-points = ["cassandra"]
  keyspace = "liquidity_server_v3"
  keyspace-autocreate = false
  tables-autocreate = false
}
cassandra-query-journal.refresh-interval = 300s
liquidity {
  server {
    ping-interval = 30s
    http {
      interface = "0.0.0.0"
      port = 80
    }
    https {
      interface = "0.0.0.0"
      port = 443
    }
  }
  analytics.cassandra.keyspace = "liquidity_analytics_v3"
}
